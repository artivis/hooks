#!/bin/bash

DEBUG=0

# Retrieve author information as Git sees it while commiting
AUTHORINFO=$(git var GIT_AUTHOR_IDENT) || exit 1
NAME=$(printf '%s\n' "${AUTHORINFO}" | sed -n 's/^\(.*\) <.*$/\1/p')
EMAIL=$(printf '%s\n' "${AUTHORINFO}" | sed -n 's/^.* <\(.*\)> .*$/\1/p')

if [ $DEBUG -eq 1 ]; then
  printf "AUTHORINFO: %s\n" "${AUTHORINFO}"
  printf "NAME: %s\n" "${NAME}"
  printf "EMAIL: %s\n" "${EMAIL}"
fi

if [[ $NAME == "TO_FILL" ]]; then
  echo ""
  echo "You forgot to set your git user !"
  echo ""
  exit 1
fi

# Retrieve author information of the Repo user
REPONAME=$(git config --get user.name)
REPOEMAIL=$(git config --get user.email)

if [ $DEBUG -eq 1 ]; then
  printf "REPONAME: %s\n" "${REPONAME}"
  printf "REPOEMAIL: %s\n" "${REPOEMAIL}"
fi

# Check where our HEAD is at

TOPLEVEL=$(git rev-parse --show-toplevel)

readmes=( README.md )

if [ ! -f "$TOPLEVEL/README.md" ]; then
    echo ""
    echo "[WARNING] Your project has no README.md !"
    echo ""
fi

protected_branch=( master release )
re="$(printf '%s\n' "${protected_branch[@]}" | paste -sd '|')"

current_branch=$(git symbolic-ref --short HEAD)

if [[ "$current_branch" =~ $protected_branch ]]; then
  echo ""
  echo "[ERROR] Work on master $current_branch is restricted.\
 Please create a new branch."
  echo ""
    exit 1
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

#exit 0
